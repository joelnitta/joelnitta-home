---
title: "Multilingual webpages with `babelquarto` (part 1 of 2)"
description:
  Do you speak my language?
date: 2024-12-06
date-modified: today
image: image.jpg
citation:
  url: 2024-12-06_babelquarto
lang: en
categories:
  - R
  - translation
  - Quarto
---

## tl;dr

- Quarto [doesn't support multilingual websites](https://github.com/quarto-dev/quarto-cli/issues/275) (yet).
- I demonstrate how to create one with the `babelquarto` R package.
- You can see the [example website](https://joelnitta.github.io/example-babelquarto/) and check out the [source code](https://joelnitta.github.io/example-babelquarto/).

## Say hi to `babelquarto`

```{r}
#| label: renv
#| include: false

renv::use(lockfile = "renv.lock")
```

[Quarto](https://quarto.org) is an amazingly flexible tool connecting the data analysis powers of languages like R, python, and Julia to output formats ranging from PDF to websites. New features are rapidly released, but one that has been lacking so far is support for multilingual websites[^1]. Fortunately, folks at [rOpenSci](https://ropensci.org/) have stepped up to fill the gap with the [`babelquarto` R package](https://docs.ropensci.org/babelquarto)[^2]. Here, I demonstrate how to use it to make a simple multilingual website.

::: {.callout-important}

There is an [issue open](https://github.com/quarto-dev/quarto-cli/issues/275) for adding multilingual websites to Quarto.

If / when that issue gets resolved, it is likely that **the method outlined in this blog post will become obsolete**.
But for now, this is a good way to create a multilingual website (or book).

:::

::: {.callout-note}

You may be interested in my [presentation at the 2024 JapanR conference](https://joelnitta.github.io/2024-12-07-japanr/) on this same topic.

:::

[^1]: The `lang` option [can be used](https://quarto.org/docs/authoring/language.html) to change the *overall* language of a website, but this does not allow selecting from among multiple languages.

[^2]: In this blog post I focus on creating a multilingual **webpage**.
`babelquarto` can also output [multilingual books](https://docs.ropensci.org/babelquarto/reference/quarto_multilingual_book.html), but AFAIK the workflow is largely the same.

## Getting started

Here, I assume you want to add multilingual support to an existing webpage[^3]. For demonstration purposes, let's use the default one generated by `quarto create project` (or `quarto_create_project()` if using the `quarto` R package):

[^3]: If you are creating a multilingual website from scratch, you may want to use `babelquarto::quarto_multilingual_website()`, or `babelquarto::quarto_multilingual_book()` for a book.

```{r}
#| label: create-site-hide
#| echo: false
library(quarto)
library(babelquarto)
library(fs)

# Create the website in a temporary directory.
temp_dir <- tempdir()

website_dir <- fs::path(temp_dir, "example")

if (fs::dir_exists(website_dir)) {
  fs::dir_delete(website_dir)
}

quarto_create_project(
  name = "example",
  type = "website",
  dir = temp_dir,
  quiet = TRUE,
  no_prompt = TRUE
)
```

```{r}
#| label: create-site-show
#| eval: false
library(quarto)
library(babelquarto)
library(fs)

# Create the website in a temporary directory.
temp_dir <- tempdir()

quarto_create_project(
  name = "example",
  type = "website",
  dir = temp_dir
)
```

Let's check the contents of the new website:

```{r}
#| label: show-website-1
website_dir <- path(temp_dir, "example")

dir_tree(website_dir)
```

In subsequent steps we will modify `_quarto.yml`, so let's see what it looks like in its default form:

```{r}
#| label: show-quarto-yml-1
readr::read_lines(path(website_dir, "_quarto.yml")) |>
  cat(sep = "\n")
```

## Register languages

The next step is to modify `_quarto.yml` by registering the main language of the website (in other words, the default language that appears when accessing the main URL). Here, we will register Japanese as the main language:

```{r}
#| label: register-main-lang
register_main_language(
  main_language = "ja",
  project_path = website_dir
)
```

This will modify `_quarto.yml`:

```{r}
#| label: show-quarto-yml-2
readr::read_lines(path(website_dir, "_quarto.yml")) |>
  cat(sep = "\n")
```

You can see a new key `babelquarto:` has been added at the end. We'll get to the details of that in a moment.

Next, let's add an additional language. You can add as many additional languages as you like, but here we will only add English:

```{r}
#| label: add-en
register_further_languages(c("en"), website_dir)

readr::read_lines(path(website_dir, "_quarto.yml")) |>
  cat(sep = "\n")
```

## Edit `_quarto.yml`

So far, `babelquarto` has generated files and content for us, but the next step is to get our hands dirty and actually edit `_quarto.yml`.

We will make the following changes:

-   Change the text on the **language selector** {{< bi globe2 >}} from `Version in en` to `English` and `Version in ja` to `日本語`.

-   Set the English versions of the homepage title, author, and description.

-   Simplify the layout of the navbar.

This is what edited version looks like:

```{r}
#| label: show-edited-quarto-yml
#| echo: true
getwd()
fs::file_copy(
  path = "./example-quarto.yml",
  path(website_dir, "_quarto.yml"),
  overwrite = TRUE
)
readr::read_lines(path(website_dir, "_quarto.yml")) |>
  cat(sep = "\n")
```

## Add translated files

It bears repeating that `babelquarto` renders multilingual websites, and does not actually *translate* any contents. So we need to provide those ourselves.

`babelquarto` expects the translated files to be named with `.<lang>` inserted between the original file name and the `.qmd` extension. For example, the English version of `index.qmd` is `index.en.qmd`. In this example, `index.qmd` has contents in the default language (Japanese).

Once you've written out those files, the website folder should look like this:

```{r}
#| label: trans-files-hide
#| echo: false
#| message: false
base_url <- "https://raw.githubusercontent.com/joelnitta/example-babelquarto/refs/heads/main/"
download.file(
  url = paste0(base_url, "index.qmd"),
  destfile = path(website_dir, "index.qmd")
)
download.file(
  url = paste0(base_url, "index.en.qmd"),
  destfile = path(website_dir, "index.en.qmd")
)
download.file(
  url = paste0(base_url, "about.qmd"),
  destfile = path(website_dir, "about.qmd")
)
download.file(
  url = paste0(base_url, "about.en.qmd"),
  destfile = path(website_dir, "about.en.qmd")
)
```

```{r}
#| label: trans-files-show
#| echo: true
dir_tree(website_dir)
```

...with (for example) contents like this:

```{r}
#| label: show-trans-index
#| echo: true
readr::read_lines(path(website_dir, "index.qmd")) |>
  cat(sep = "\n")

readr::read_lines(path(website_dir, "index.en.qmd")) |>
  cat(sep = "\n")
```

## Render

Next, we need to render the `.qmd` files to HTML.
If you are used to using Quarto, you may expect to do this with `quarto render` or `quarto preview`, but those do not work with `babelquarto`.

Instead, we use `babelquarto::render_website()`.

```{r}
#| label: render
render_website(project_path = website_dir)
```

The HTML has been written out to `_site/`.

## Serve

Now we'd like to view the rendered website in a browser.
Once again, `quarto preview` cannot be used here.
Instead, use `servr::httw()`.

```{r}
#| label: serve
#| eval: false
servr::httw(path(website_dir, "_site"))
```

Your browser should open a tab with the website shown below:

<iframe src="https://joelnitta.github.io/example-babelquarto/" width="100%" height="400px"></iframe>

## Example repo

I've posted this same example to a repository at <https://github.com/joelnitta/example-babelquarto/>.
The rendered website (<https://joelnitta.github.io/example-babelquarto/>) is exactly what you see above.

## What's next

With this, you should be able to create a simple multilingual website.

In my next post, I will demonstrate some more advanced techniques to control content with [Quarto profiles](https://docs.ropensci.org/babelquarto/articles/configuration.html#using-profiles-for-advanced-configuration) and automating deployment with [GitHub Actions](https://docs.ropensci.org/babelquarto/articles/render-with-ci.html).

See you next time!
