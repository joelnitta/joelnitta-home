{
  "hash": "fb99e21b567548403c4b991728c93443",
  "result": {
    "markdown": "---\ntitle: \"Getting started with 17lands data in R\"\ndescription: Drafting with data for fun and improved win-rate\ndate: 2024-01-01\ndate-modified: today\nimage: header_17lands.png\ncitation:\n  url: https://www.joelnitta.com/posts/17lands-intro/\ncategories:\n  - R\n  - \"Magic the Gathering\"\nknitr:\n  opts_chunk: \n      cache: false\nlang: en\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## TL;DR\n\nI demonstrate how to analyze win-rate statistics for [Magic cards](https://en.wikipedia.org/wiki/Magic:_The_Gathering) based on [17lands](https://www.17lands.com) data in R.\n\n## About 17lands\n\nOne of my favorite pastimes is playing the one of the greatest games ever invented, [**Magic the Gathering**](https://en.wikipedia.org/wiki/Magic:_The_Gathering) (MtG).\nI have been an MtG fan almost since it first came it out (*Fallen Empires*).\nI had a fairly long hiatus, but have since returned to it recently and happily discovered a lively online community of players and, more importantly for this post, data nerds.\nOne key source of data for those playing the [draft format](https://en.wikipedia.org/wiki/Magic:_The_Gathering_formats#Limited) is [17lands](https://www.17lands.com), a website that collects user-contributed data to help players improve their game.\n\nHere I will show how to analyze 17lands data in R.\nThese are very complex datasets, and the possibilities for analysis are nearly limitless.\nI will start by recreating one of the basic 17lands analyses that most players are interested in: [**win-rate**](https://www.17lands.com/card_data)^[If you just care about actually looking at win-rate statistics, you should head straight to the 17lands [card data](https://www.17lands.com/card_data). This post is for those folks interested in learning how to calculate the stats on their own so they can use them for further analyses].\n\n\n::: {.cell}\n::: {.cell-output-display}\n![*Bonehoard Dracosaur* by Mark Zug](https://cards.scryfall.io/art_crop/front/2/2/2220ed60-3f8f-4dd2-8319-6a06896a5350.jpg?1699044226)\n:::\n:::\n\n\n## Load the data\n\nFortunately, 17lands posts aggregated, anonymized datasets for us to analyze, so we don't need to scrape anything^[Scraping [is discouraged by 17lands](https://www.17lands.com/usage_guidelines).].\nThe full list of datasets is at <https://www.17lands.com/public_datasets>.\nHere, we will analyze one of the more recent sets from 2023, [*Lost Caverns of Ixalan*](https://mtg.fandom.com/wiki/The_Lost_Caverns_of_Ixalan) (LCI).\n\nYou will need to copy the link to the game data, which you can find as shown in this screenshot:\n\n![](screenshot_17lands-link.png)\n\nThe datasets can be quite large, and can result in crashing due to insufficient memory when you try to load them.\nTo avoid this, I recommend the [`data.table`](https://rdatatable.gitlab.io/data.table/) package, which is quite efficient and can usually handle these large files.\n`data.table` also includes a whole set of functions for wrangling data, but I am more used to [`tidyverse`](https://tidyverse.tidyverse.org/) syntax, so I will use the latter (which works just fine on data read in with `data.table`).\nAnother perk of the `fread()` function of `data.table` is that it can load a zipped file from the URL --- you don't even have to download it to separate file!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyverse)\n```\n:::\n\n\n\n::: {.cell hash='index_cache/html/load-data_3580c61e3d6255ea13015d457dac4e13'}\n\n```{.r .cell-code}\n# Specify URL of the CSV file\nurl <- \"https://17lands-public.s3.amazonaws.com/analysis_data/game_data/game_data_public.LCI.PremierDraft.csv.gz\"\n\n# Load the data\ngames_data <- fread(url)\n\n# Check dimensions of the data (rows and columns)\ndim(games_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 823614   1475\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![*Aclazotz, Deepest Betrayal* by Steve Prescott](https://cards.scryfall.io/art_crop/front/6/2/627c392c-4d18-4eb2-a4e8-c668f61f5487.jpg?1699044055)\n:::\n:::\n\n\n## Structure of the dataset\n\nThat is a big dataset!\nWe can't print the whole thing to the screen, so let's just take a look at a subset of the data.\nI like the tidyverse `glimpse()` function for this.\nIt prints out information vertically, so it works especially well when you have a lot of columns that otherwise would not fit on your monitor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_data %>%\n  # Grab the first row\n  slice(1) %>%\n  # Grab the first 30 columns\n  select(1:30) %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 30\n$ expansion                             <chr> \"LCI\"\n$ event_type                            <chr> \"PremierDraft\"\n$ draft_id                              <chr> \"976d867638234d0087008f387809c325\"\n$ draft_time                            <dttm> 2023-11-09 22:57:41\n$ game_time                             <dttm> 2023-11-09 23:43:35\n$ build_index                           <int> 0\n$ match_number                          <int> 1\n$ game_number                           <int> 1\n$ rank                                  <chr> \"bronze\"\n$ opp_rank                              <chr> \"None\"\n$ main_colors                           <chr> \"RG\"\n$ splash_colors                         <chr> \"WU\"\n$ on_play                               <lgl> FALSE\n$ num_mulligans                         <int> 0\n$ opp_num_mulligans                     <int> 0\n$ opp_colors                            <chr> \"WR\"\n$ num_turns                             <int> 13\n$ won                                   <lgl> FALSE\n$ opening_hand_Abrade                   <int> 0\n$ drawn_Abrade                          <int> 1\n$ tutored_Abrade                        <int> 0\n$ deck_Abrade                           <int> 1\n$ sideboard_Abrade                      <int> 0\n$ `opening_hand_Abuelo's Awakening`     <int> 0\n$ `drawn_Abuelo's Awakening`            <int> 0\n$ `tutored_Abuelo's Awakening`          <int> 0\n$ `deck_Abuelo's Awakening`             <int> 0\n$ `sideboard_Abuelo's Awakening`        <int> 0\n$ `opening_hand_Abuelo, Ancestral Echo` <int> 0\n$ `drawn_Abuelo, Ancestral Echo`        <int> 0\n```\n:::\n:::\n\n\nEach row is one game.\nThe first 18 columns or so give us game data like player rank, deck color, etc.\nThe rest of the columns each start with names like `opening_hand_`, `drawn_`, `tutored_`, `deck_`, and `sideboard_`, followed by the name of a card.\nThese are some of the most useful columns for gaining insight into how particular cards perform: they tell us where each card in the set was seen in a particular matchup.\nSome of the stats that 17lands users care the most about include which cards perform better; that is, what is the win-rate when a particular card is included in a deck, drawn, etc.\nWe can calculate card specific win-rate statistics from these columns.\n\nAre there any columns at the end (after all the card names) that we might be interested in though?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_data %>%\n  # Exclude all the card columns\n  select(-matches(\"opening_hand|drawn_|tutored_|deck_|sideboard_\")) %>%\n  slice(1) %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 20\n$ expansion                 <chr> \"LCI\"\n$ event_type                <chr> \"PremierDraft\"\n$ draft_id                  <chr> \"976d867638234d0087008f387809c325\"\n$ draft_time                <dttm> 2023-11-09 22:57:41\n$ game_time                 <dttm> 2023-11-09 23:43:35\n$ build_index               <int> 0\n$ match_number              <int> 1\n$ game_number               <int> 1\n$ rank                      <chr> \"bronze\"\n$ opp_rank                  <chr> \"None\"\n$ main_colors               <chr> \"RG\"\n$ splash_colors             <chr> \"WU\"\n$ on_play                   <lgl> FALSE\n$ num_mulligans             <int> 0\n$ opp_num_mulligans         <int> 0\n$ opp_colors                <chr> \"WR\"\n$ num_turns                 <int> 13\n$ won                       <lgl> FALSE\n$ user_n_games_bucket       <int> 50\n$ user_game_win_rate_bucket <dbl> 0.56\n```\n:::\n:::\n\n\nYes!\nThere are two more columns of interest after all the card columns: `user_n_games_bucket` and `user_game_win_rate_bucket`.\nWhat do these mean?\nLet's see what kind of values they contain.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_data %>%\n  count(user_n_games_bucket)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user_n_games_bucket      n\n1:                   1   1585\n2:                   5   7044\n3:                  10 115547\n4:                  50 181307\n5:                 100 483041\n6:                 500  29872\n7:                1000   5218\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n`user_n_games_bucket` describes the number of games played by the user in a given row. Ordinarily, you would expect this to have a wide range of numbers, but it only contains seven distinct values.\nAs the column name suggests, the raw data have been aggregated into \"buckets\".\nSo `1` actually means some range of games played by that user (probably one to four), not exactly one game.\nThis has been done to protect the privacy of 17lands users.\nWe can see that the majority of users have played around 100 games.\n\nWhat about `user_game_win_rate_bucket`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames_data %>%\n  count(user_game_win_rate_bucket)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    user_game_win_rate_bucket      n\n 1:                      0.00    492\n 2:                      0.10     66\n 3:                      0.12     32\n 4:                      0.14    222\n 5:                      0.16    131\n 6:                      0.18    129\n 7:                      0.20    259\n 8:                      0.22    189\n 9:                      0.24   1685\n10:                      0.26    210\n11:                      0.28    881\n12:                      0.30   1731\n13:                      0.32   2637\n14:                      0.34   3605\n15:                      0.36   4375\n16:                      0.38   4300\n17:                      0.40  11308\n18:                      0.42  20421\n19:                      0.44  26808\n20:                      0.46  42789\n21:                      0.48  46269\n22:                      0.50  78871\n23:                      0.52  83124\n24:                      0.54  91743\n25:                      0.56 100421\n26:                      0.58  82407\n27:                      0.60  80046\n28:                      0.62  53942\n29:                      0.64  33408\n30:                      0.66  20355\n31:                      0.68  13197\n32:                      0.70   7225\n33:                      0.72   3147\n34:                      0.74   2400\n35:                      0.76   1784\n36:                      0.78    880\n37:                      0.80    788\n38:                      0.82    348\n39:                      0.84    197\n40:                      0.86    400\n41:                      0.88      9\n42:                      0.90    117\n43:                      0.92     28\n44:                        NA    238\n    user_game_win_rate_bucket      n\n```\n:::\n:::\n\n\n`user_game_win_rate_bucket` describes the win-rate of the user in a given row.\nIt is also aggregated, but at a finer scale: the buckets are in 2% win-rate increments.\nThe mode of the win-rate is 56%.\nThis demonstrates an important point when using 17lands data: 17lands users are slightly more skilled than the average player overall.\nSo your point of reference for judging whether a card improves win-rate should be 56%, not 50%^[Average win-rate also varies from set to set, so you should keep that in mind when comparing stats between sets.].\n\nThese data are useful for partitioning the dataset into high-performing (high win-rate) vs. lower performing (low win-rate) users.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![*Palani's Hatcher* by Aaron Miller](https://cards.scryfall.io/art_crop/front/8/6/86ff73c7-428c-469c-b564-6aa9f4eeca14.jpg?1699044564)\n:::\n:::\n\n\n## Calculate win-rate\n\n### Win-rate per card\n\nThe data provided by 17lands are close to \"raw\" form, with a single row per game.\nHow can we go from that to win-rate?\n\nBelow I show a function that takes the raw game data and calculates win-rate statistics for a single card.\nTo learn more about what each statistic means, see the [17lands definitions](https://www.17lands.com/metrics_definitions).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncard_wr <- function(card, games_data) {\n  games_data %>%\n    # Select a single card and whether the game was won or not\n    select(\n      matches(glue::glue(\"won|{card}\"))\n    ) %>%\n    # Since we only have one card now, strip the card name from\n    # the column names\n    rename_with(~ str_remove_all(., glue::glue(\"_{card}\"))) %>%\n    # We only care about decks that played that card\n    filter(deck > 0) %>%\n    # Add stats:\n    # - how many times the card was drawn (game_in_hand),\n    # - how many times it was seen during a game (game_seen),\n    # - if it was not seen during a game (game_not_seen)\n    rowwise() %>%\n    mutate(\n      game_in_hand = sum(opening_hand, drawn),\n      game_seen = sum(game_in_hand, tutored),\n      game_not_seen = deck - game_seen,\n    ) %>%\n    ungroup() %>%\n    # Adjust Number of Games Not Seen\n    # \"If more copies are seen in a game than are in the maindeck,\n    # this value is set to 0.\"\n    mutate(\n      game_not_seen = case_when(\n        game_not_seen < 0 ~ 0,\n        .default = game_not_seen\n      )\n    ) %>%\n    mutate(\n      opening_hand_win = opening_hand * won,\n      game_played_win = deck * won,\n      game_in_hand_win = game_in_hand * won,\n      game_not_seen_win = game_not_seen * won\n    ) %>%\n    summarize(\n      card = card,\n      games_played_n = sum(deck),\n      game_played_wr = sum(game_played_win) / games_played_n,\n      opening_hand_n = sum(opening_hand),\n      opening_hand_wr = sum(opening_hand_win) / opening_hand_n,\n      game_in_hand_n = sum(game_in_hand),\n      game_in_hand_wr = sum(game_in_hand_win) / game_in_hand_n,\n      game_not_seen_n = sum(game_not_seen),\n      game_not_seen_wr = sum(game_not_seen_win) / game_not_seen_n,\n      iwd = game_in_hand_wr - game_not_seen_wr\n    )\n}\n```\n:::\n\n\nLet's try it out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncard_wr(\"Abuelo's Awakening\", games_data) %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 10\n$ card             <chr> \"Abuelo's Awakening\"\n$ games_played_n   <int> 6662\n$ game_played_wr   <dbl> 0.5118583\n$ opening_hand_n   <int> 995\n$ opening_hand_wr  <dbl> 0.4572864\n$ game_in_hand_n   <int> 2595\n$ game_in_hand_wr  <dbl> 0.4955684\n$ game_not_seen_n  <dbl> 4039\n$ game_not_seen_wr <dbl> 0.5224065\n$ iwd              <dbl> -0.02683814\n```\n:::\n:::\n\n\nWe can compare this to the actual stats on 17lands (notice you will need adjust the start and end dates to match the data we downloaded, since there is a lag between posted datasets and stats on 17lands).\n\n![](screenshot_17Lands.png)\n\nLooks pretty good!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![*Kitesail Larcenist* by Sidharth Chaturvedi](https://cards.scryfall.io/art_crop/front/0/3/03207457-70d8-4462-8c8b-ed39791d56a1.jpg?1699043787)\n:::\n:::\n\n\n### Win-rate for a set\n\nThe next step is to scale-up and apply our win-rate counting function to the whole set.\n\nFirst, let's make a vector of all the cards in LCI:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract card names from column titles\ncards <- games_data %>%\n  select(matches(\"deck_\")) %>%\n  colnames() %>%\n  str_remove_all(\"deck_\")\n\n# Have a look at some of the card names\nhead(cards)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Abrade\"                     \"Abuelo's Awakening\"         \"Abuelo, Ancestral Echo\"     \"Abyssal Gorestalker\"        \"Aclazotz, Deepest Betrayal\" \"Acolyte of Aclazotz\"       \n```\n:::\n:::\n\n\nNext, use the function on each one, and save the results to a dataframe:\n\n\n::: {.cell hash='index_cache/html/make-wr-df_fbc7e9c13977f1c7fa84e66298594a48'}\n\n```{.r .cell-code}\nwin_rate <-\n  map_df(cards, ~card_wr(., games_data))\n\nwin_rate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 291 × 10\n   card             games_played_n game_played_wr opening_hand_n opening_hand_wr\n   <chr>                     <dbl>          <dbl>          <dbl>           <dbl>\n 1 Abrade                   275876          0.565          47592           0.564\n 2 Abuelo's Awaken…           6662          0.512            995           0.457\n 3 Abuelo, Ancestr…          27197          0.560           4654           0.564\n 4 Abyssal Goresta…          19564          0.511           2955           0.513\n 5 Aclazotz, Deepe…          14642          0.591           2512           0.682\n 6 Acolyte of Acla…          51506          0.490           8344           0.461\n 7 Acrobatic Leap            40362          0.555           6033           0.540\n 8 Adaptive Gemgua…         142381          0.545          22988           0.534\n 9 Akal Pakal, Fir…          37520          0.579           6579           0.651\n10 Akawalli, the S…          41977          0.530           7094           0.526\n# ℹ 281 more rows\n# ℹ 5 more variables: game_in_hand_n <dbl>, game_in_hand_wr <dbl>,\n#   game_not_seen_n <dbl>, game_not_seen_wr <dbl>, iwd <dbl>\n```\n:::\n:::\n\n\nWe can see the top-performing cards by sorting by game-in-hand win-rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwin_rate %>%\n  arrange(desc(game_in_hand_wr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 291 × 10\n   card                          games_played_n game_played_wr opening_hand_n opening_hand_wr game_in_hand_n game_in_hand_wr game_not_seen_n game_not_seen_wr    iwd\n   <chr>                                  <dbl>          <dbl>          <dbl>           <dbl>          <dbl>           <dbl>           <dbl>            <dbl>  <dbl>\n 1 Bonehoard Dracosaur                    16632          0.607           2906           0.700           7027           0.704            9588            0.535 0.169 \n 2 Aclazotz, Deepest Betrayal             14642          0.591           2512           0.682           6486           0.690            8076            0.512 0.178 \n 3 Palani's Hatcher                       31805          0.594           5407           0.672          13034           0.674           18484            0.536 0.138 \n 4 Kitesail Larcenist                     36542          0.597           6503           0.646          15896           0.656           19906            0.545 0.110 \n 5 Unstable Glyphbridge                   33272          0.590           5712           0.635          14337           0.653           18629            0.539 0.114 \n 6 Magmatic Galleon                       34727          0.589           5722           0.651          13919           0.653           20509            0.544 0.109 \n 7 Sanguine Evangelist                    34346          0.593           6157           0.668          14469           0.653           19722            0.549 0.103 \n 8 Huatli, Poet of Unity                  14170          0.581           2536           0.663           6006           0.650            8082            0.529 0.122 \n 9 Breeches, Eager Pillager               34149          0.596           6261           0.659          14371           0.649           19435            0.555 0.0946\n10 Sentinel of the Nameless City          27881          0.583           5022           0.673          12111           0.645           15621            0.535 0.110 \n# ℹ 281 more rows\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![*Magmatic Galleon* by Cristi Balanescu](https://cards.scryfall.io/art_crop/front/4/4/4471a833-11b9-4146-a9c0-84a6896c94d8.jpg?1699044307)\n:::\n:::\n\n\n## Wrap-up\n\nI hope this post helps you analyze 17lands data in R.\nSo far, we have only reproduced the win-rate statistics, which are available on 17lands anyways.\nIn the future, I plan to demonstrate other custom analyses that build on this post to explore the data in more detail.\n\nPlease comment in the discussion if you have any ideas for analyses to try!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![*Huatli, Poet of Unity* by Tyler Jacobson](https://cards.scryfall.io/art_crop/front/5/7/57df2563-18d4-4526-a8bc-0c114e6fd4d9.jpg?1699044416)\n:::\n:::\n\n\n## Reproducibility {.appendix}\n\n- [Source code](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2023-12-23_17lands-intro/index.qmd)\n- [`renv` lockfile](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2023-12-23_17lands-intro/renv.lock)\n\n## Images {.appendix}\n\nCard images copyright [Wizards of the Coast](https://company.wizards.com/) obtained via the [Scryfall](https://scryfall.com/) API and are considered to qualify as [fair use](https://en.wikipedia.org/wiki/Fair_use).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}