{
  "hash": "d4b412189b6a729e4daadced3928a71a",
  "result": {
    "markdown": "---\ntitle: \"Building R docker images with secrets\"\ndescription:\n  Keep it secret. Keep it safe.\ndate: 2019-02-16\ndate-modified: today\nimage: featured.png\ncitation:\n  url: https://www.joelnitta.com/posts/2019-02-16_building-r-docker-images-with-secrets/\ncategories:\n  - docker\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n<!--------------- post ----------------->\n\n![Top secret](featured.png)\n\nDocker is an incredibly useful tool for running reproducible analysis workflows. For `useRs`, the [rocker](https://www.rocker-project.org/) collection of images is very convenient for creating version-controlled R environments. This is pretty straightforward if you are using packages on CRAN, or publicly available packages on GitHub. But what if we want to use private packages on GitHub, or need for any other reason to enter authentication credentials during the build?\n\nThere are various ways to copy data into the image during the build, but when handling secrets that we don't want hanging around after it's finished, caution is needed. Approaches such as using `COPY` or `ARGS` will leave traces in the build. Staged builds are more secure, but tricky. Fortunately, as of v. 18.09, Docker is now providing official support for handling secrets.\n\n## A simple example\n\nHere is how to use the new Docker features to securely pass a secret during a build ^[No guarantees!! This is just my understanding from reading the [docker documentation](https://docs.docker.com/develop/develop-images/build_enhancements/) and [other blogs](https://medium.com/@tonistiigi/build-secrets-and-ssh-forwarding-in-docker-18-09-ae8161d066)].\n\nThere are few non-default settings that need to be specified for this. First of all, prior to the `docker build` command, you need to specify that you want to use the new BuildKit backend with `DOCKER_BUILDKIT=1`. So the command starts `DOCKER_BUILDKIT=1 docker build ...`\n\nNext, we must add a [syntax directive](https://docs.docker.com/engine/reference/builder/#syntax) to the top line of the `Dockerfile`. For example, for a `Dockerfile` based on `rocker/tidyverse`:\n\n```shell\n# syntax=docker/dockerfile:1.0.0-experimental\nFROM rocker/tidyverse\n```\n\nSave your secrets in a text file. Let's call it `my_secret_stash`^[Of course, be sure to add the file containing the secret to `.gitignore`!]. If you are using it to store your [GitHub PAT](https://happygitwithr.com/github-pat.html), it would just be one line with the PAT. Here, let's put in some random word:\n\n```shell\necho \"FABULOUS\" > my_secret_stash\n```\n\nThis is all we need to use secrets during the build. Here is an example `Dockerfile` similar to the one in the [Docker documentation](https://docs.docker.com/develop/develop-images/build_enhancements/).\n\n```shell\n# syntax = docker/dockerfile:1.0-experimental\nFROM alpine\n\nRUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret\n```\n\nTo see how it works, save this as `Dockerfile`, then from the same directory containing `Dockerfile` and `my_secret_stash`, build the image:\n\n```shell\nDOCKER_BUILDKIT=1 docker build --progress=plain --no-cache \\\n--secret id=mysecret,src=my_secret_stash .\n```\n\nI've truncated the output, but you should see something like this (the exact build step number may vary).\n\n<pre><output>\n#7 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret\n#7       digest: sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de\n#7         name: \"[2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret\"\n#7      started: 2019-02-18 20:51:20.1092144 +0000 UTC\n#7 0.668 FABULOUS\n#7    completed: 2019-02-18 20:51:21.0927656 +0000 UTC\n#7     duration: 983.5512ms\n</output></pre>\n\nCan you spot our secret? It's showing up from the `cat` command. However, it will not remain in the image.\n\n## Installing a private R package\n\nTo install a package from my private GitHub repo, I created an additional simple R script, called `install_git_packages.R`:\n\n```r\n# install_git_packages.R\nsecret <- commandArgs(trailing = TRUE)\ndevtools::install_github(\"joelnitta/my-private-package\", auth_token = secret)\n```\n\n`commandArgs(trailing = TRUE)` will return whatever command line arguments were passed to `Rscript` after the name of the script, as a character vector.\n\nWe will call this script from the `Dockerfile` and pass the secret to it.\n\nHere is the Dockerfile to do that. (Note that although we copy the `install_git_packages.R` script into the image, we are passing it the secret variable that is only present during the build, so this should not remain afterwards.)\n\n```shell\n# syntax = docker/dockerfile:1.0-experimental\nFROM rocker/tidyverse:3.5.1\n\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY install_git_packages.R .\n\nRUN apt-get update\n\nRUN --mount=type=secret,id=mysecret \\\nRscript install_git_packages.R `cat /run/secrets/mysecret`\n```\n\nLet's build the image and tag it:\n```shell\nDOCKER_BUILDKIT=1 docker build --progress=plain --no-cache \\\n--secret id=mysecret,src=my_secret_stash . -t my_special_image\n```\n\nThat's it!\n\n## Reproducibility {.appendix}\n\n- [Source code](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2019-02-16_building-r-docker-images-with-secrets/index.qmd)\n- [`renv` lockfile](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2019-02-16_building-r-docker-images-with-secrets/renv.lock)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}